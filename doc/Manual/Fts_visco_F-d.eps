%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.71.0 (http://poppler.freedesktop.org)
%%Creator: MATLAB, The Mathworks, Inc. Version 7.8.0.347 (R2009a). Operating System: Linux 2.6.32-5-amd64 #1 SMP Mon Mar 7 21:35:22 UTC 2011 x86_64.
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 288 216
%%HiResBoundingBox: 0 0 288 216
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
/F8_0 /Helvetica 1 1
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
  /parenleft/parenright/asterisk/plus/comma/hyphen/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /quoteleft/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/exclamdown/cent/sterling/fraction/yen/florin/section
  /currency/quotesingle/quotedblleft/guillemotleft/guilsinglleft/guilsinglright/fi/fl
  /.notdef/endash/dagger/daggerdbl/periodcentered/.notdef/paragraph/bullet
  /quotesinglbase/quotedblbase/quotedblright/guillemotright/ellipsis/perthousand/.notdef/questiondown
  /.notdef/grave/acute/circumflex/tilde/macron/breve/dotaccent
  /dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut/ogonek/caron
  /emdash/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/AE/.notdef/ordfeminine/.notdef/.notdef/.notdef/.notdef
  /Lslash/Oslash/OE/ordmasculine/.notdef/.notdef/.notdef/.notdef
  /.notdef/ae/.notdef/.notdef/.notdef/dotlessi/.notdef/.notdef
  /lslash/oslash/oe/germandbls/.notdef/.notdef/.notdef/.notdef]
pdfMakeFont
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 288 216 re
W
q
q
[0.1 0 0 0.1 0 0] cm
5 w
1 j
/DeviceGray {} CS
[1] SC
374.168 237.5 2231.662 1750.83 re
S
[5 40] 0 d
3.33333 w
/DeviceGray {} CS
[0] SC
1543.33 237.5 m
1543.33 1988.33 l
S
1543.33 1988.33 m
1543.33 1988.33 l
S
374.168 272.5 m
2606.67 272.5 l
S
2606.67 272.5 m
2606.67 272.5 l
S
[] 0 d
5 w
374.168 237.5 m
2605.83 237.5 l
S
374.168 1988.33 m
2605.83 1988.33 l
S
374.168 237.5 m
374.168 1988.33 l
S
2605.83 237.5 m
2605.83 1988.33 l
S
374.168 237.5 m
2605.83 237.5 l
S
374.168 237.5 m
374.168 1988.33 l
S
1543.33 237.5 m
1543.33 260 l
S
1543.33 1988.33 m
1543.33 1966.67 l
S
374.168 272.5 m
395.832 272.5 l
S
2606.67 272.5 m
2584.17 272.5 l
S
374.168 237.5 m
2605.83 237.5 l
S
374.168 1988.33 m
2605.83 1988.33 l
S
374.168 237.5 m
374.168 1988.33 l
S
2605.83 237.5 m
2605.83 1988.33 l
S
q
374.168 236.668 2233.332 1751.662 re
W
20 w
/DeviceRGB {} CS
[1 0 0] SC
2366.67 272.5 m
2605.83 272.5 l
S
1820.83 272.5 m
2366.67 272.5 l
S
1170.83 837.5 m
1176.67 827.5 l
1183.33 818.332 l
1189.17 808.332 l
1195.83 799.168 l
1201.67 789.168 l
1208.33 780 l
1215 770 l
1220.83 760 l
1227.5 750.832 l
1234.17 741.668 l
1240 731.668 l
1246.67 722.5 l
1253.33 712.5 l
1259.17 703.332 l
1265.83 694.168 l
1272.5 684.168 l
1279.17 675 l
1285 665.832 l
1291.67 656.668 l
1298.33 646.668 l
1305 637.5 l
1310.83 628.332 l
1317.5 619.168 l
1324.17 610 l
1330.83 600.832 l
1337.5 591.668 l
1344.17 582.5 l
1350.83 573.332 l
1357.5 564.168 l
1363.33 555 l
1370 546.668 l
1376.67 537.5 l
1383.33 528.332 l
1390 519.168 l
1396.67 510.832 l
1403.33 501.668 l
1410 492.5 l
1416.67 484.168 l
1423.33 475 l
1430 466.668 l
1436.67 457.5 l
1443.33 448.332 l
1450 440 l
1456.67 430.832 l
1463.33 422.5 l
1470 413.332 l
1476.67 404.168 l
1483.33 395 l
1490 385.832 l
1496.67 376.668 l
1503.33 366.668 l
1510 356.668 l
1516.67 346.668 l
1523.33 335 l
1530 322.5 l
1536.67 306.668 l
1543.33 272.5 l
1820.83 272.5 l
S
660 1685 m
664.168 1678.33 l
667.5 1672.5 l
671.668 1666.67 l
675 1660 l
679.168 1654.17 l
683.332 1647.5 l
686.668 1640.83 l
690.832 1634.17 l
695 1627.5 l
699.168 1620.83 l
703.332 1614.17 l
707.5 1607.5 l
711.668 1600.83 l
715.832 1594.17 l
720 1586.67 l
724.168 1580 l
728.332 1572.5 l
732.5 1565 l
736.668 1558.33 l
741.668 1550.83 l
745.832 1543.33 l
750 1535.83 l
755 1528.33 l
759.168 1520.83 l
763.332 1512.5 l
768.332 1505 l
772.5 1497.5 l
777.5 1489.17 l
781.668 1481.67 l
786.668 1473.33 l
791.668 1465.83 l
795.832 1457.5 l
800.832 1449.17 l
805.832 1441.67 l
810.832 1433.33 l
815 1425 l
820 1416.67 l
825 1408.33 l
830 1400 l
835 1390.83 l
840 1382.5 l
845 1374.17 l
850 1365 l
855 1356.67 l
860 1348.33 l
865.832 1339.17 l
870.832 1330 l
875.832 1321.67 l
880.832 1312.5 l
886.668 1304.17 l
891.668 1295 l
896.668 1285.83 l
902.5 1276.67 l
907.5 1267.5 l
912.5 1258.33 l
918.332 1249.17 l
923.332 1240 l
929.168 1230.83 l
935 1221.67 l
940 1212.5 l
945.832 1203.33 l
950.832 1194.17 l
956.668 1184.17 l
962.5 1175 l
967.5 1165.83 l
973.332 1156.67 l
979.168 1146.67 l
985 1137.5 l
990.832 1127.5 l
996.668 1118.33 l
1001.67 1108.33 l
1007.5 1099.17 l
1013.33 1090 l
1019.17 1080 l
1025 1070 l
1030.83 1060.83 l
1036.67 1050.83 l
1042.5 1041.67 l
1048.33 1031.67 l
1054.17 1022.5 l
1060.83 1012.5 l
1066.67 1002.5 l
1072.5 993.332 l
1078.33 983.332 l
1084.17 973.332 l
1090.83 964.168 l
1096.67 954.168 l
1102.5 944.168 l
1108.33 935 l
1115 925 l
1120.83 915 l
1127.5 905.832 l
1133.33 895.832 l
1139.17 885.832 l
1145.83 876.668 l
1151.67 866.668 l
1158.33 856.668 l
1164.17 847.5 l
1170.83 837.5 l
S
484.168 1813.33 m
483.332 1816.67 l
483.332 1820 l
482.5 1823.33 l
482.5 1825.83 l
481.668 1829.17 l
481.668 1831.67 l
480.832 1834.17 l
480.832 1839.17 l
480 1841.67 l
480 1860.83 l
480.832 1863.33 l
480.832 1867.5 l
481.668 1869.17 l
481.668 1870.83 l
482.5 1873.33 l
482.5 1875 l
483.332 1876.67 l
483.332 1877.5 l
484.168 1879.17 l
485 1880.83 l
485.832 1881.67 l
485.832 1882.5 l
486.668 1884.17 l
487.5 1885 l
488.332 1885.83 l
489.168 1886.67 l
490 1886.67 l
490.832 1887.5 l
492.5 1888.33 l
495 1888.33 l
496.668 1889.17 l
497.5 1888.33 l
501.668 1888.33 l
502.5 1887.5 l
504.168 1886.67 l
505.832 1886.67 l
507.5 1885.83 l
508.332 1885 l
510 1884.17 l
511.668 1883.33 l
513.332 1881.67 l
515 1880.83 l
516.668 1879.17 l
518.332 1878.33 l
520.832 1876.67 l
522.5 1875 l
524.168 1873.33 l
525.832 1871.67 l
528.332 1869.17 l
530 1867.5 l
532.5 1865.83 l
534.168 1863.33 l
536.668 1860.83 l
538.332 1858.33 l
540.832 1855.83 l
542.5 1853.33 l
545 1850.83 l
547.5 1848.33 l
550 1845.83 l
552.5 1842.5 l
555 1839.17 l
557.5 1836.67 l
560 1833.33 l
562.5 1830 l
565 1826.67 l
567.5 1823.33 l
570 1819.17 l
572.5 1815.83 l
575.832 1812.5 l
578.332 1808.33 l
580.832 1804.17 l
584.168 1800.83 l
586.668 1796.67 l
590 1792.5 l
592.5 1787.5 l
595.832 1783.33 l
599.168 1779.17 l
601.668 1774.17 l
605 1770 l
608.332 1765 l
611.668 1760 l
615 1755.83 l
618.332 1750.83 l
621.668 1745.83 l
625 1740 l
628.332 1735 l
631.668 1730 l
635 1724.17 l
638.332 1719.17 l
641.668 1713.33 l
645.832 1707.5 l
649.168 1702.5 l
652.5 1696.67 l
656.668 1690.83 l
660 1685 l
S
736.668 1137.5 m
732.5 1146.67 l
728.332 1155.83 l
724.168 1165 l
720 1174.17 l
715.832 1183.33 l
711.668 1192.5 l
707.5 1201.67 l
703.332 1210.83 l
699.168 1219.17 l
695 1228.33 l
690.832 1237.5 l
686.668 1246.67 l
683.332 1255 l
679.168 1264.17 l
675 1272.5 l
671.668 1281.67 l
667.5 1290 l
664.168 1299.17 l
660 1307.5 l
656.668 1316.67 l
652.5 1325 l
649.168 1333.33 l
645.832 1342.5 l
641.668 1350.83 l
638.332 1359.17 l
635 1367.5 l
631.668 1375.83 l
628.332 1384.17 l
625 1392.5 l
621.668 1400.83 l
618.332 1408.33 l
615 1416.67 l
611.668 1425 l
608.332 1433.33 l
605 1440.83 l
601.668 1449.17 l
599.168 1456.67 l
595.832 1464.17 l
592.5 1472.5 l
590 1480 l
586.668 1487.5 l
584.168 1495 l
580.832 1502.5 l
578.332 1510 l
575.832 1517.5 l
572.5 1525 l
570 1532.5 l
567.5 1540 l
565 1546.67 l
562.5 1554.17 l
560 1560.83 l
557.5 1568.33 l
555 1575 l
552.5 1581.67 l
550 1588.33 l
547.5 1595 l
545 1601.67 l
542.5 1608.33 l
540.832 1615 l
538.332 1621.67 l
536.668 1628.33 l
534.168 1634.17 l
532.5 1640.83 l
530 1646.67 l
528.332 1652.5 l
525.832 1659.17 l
524.168 1665 l
522.5 1670.83 l
520.832 1676.67 l
518.332 1682.5 l
516.668 1687.5 l
515 1693.33 l
513.332 1699.17 l
511.668 1704.17 l
510 1710 l
508.332 1715 l
507.5 1720 l
505.832 1725 l
504.168 1730 l
502.5 1735 l
501.668 1740 l
500 1745 l
499.168 1750 l
497.5 1754.17 l
496.668 1759.17 l
495 1763.33 l
494.168 1767.5 l
493.332 1771.67 l
492.5 1775.83 l
490.832 1780 l
490 1784.17 l
489.168 1788.33 l
488.332 1792.5 l
487.5 1795.83 l
486.668 1800 l
485.832 1803.33 l
485.832 1806.67 l
485 1810 l
484.168 1813.33 l
S
1291.67 325.832 m
1285 330.832 l
1279.17 335.832 l
1272.5 340.832 l
1265.83 345.832 l
1259.17 351.668 l
1253.33 356.668 l
1246.67 362.5 l
1240 368.332 l
1234.17 374.168 l
1227.5 380 l
1220.83 386.668 l
1215 392.5 l
1208.33 399.168 l
1201.67 405.832 l
1195.83 411.668 l
1189.17 418.332 l
1183.33 425 l
1176.67 431.668 l
1170.83 439.168 l
1164.17 445.832 l
1158.33 453.332 l
1151.67 460 l
1145.83 467.5 l
1139.17 474.168 l
1133.33 481.668 l
1127.5 489.168 l
1120.83 496.668 l
1115 504.168 l
1108.33 512.5 l
1102.5 520 l
1096.67 527.5 l
1090.83 535.832 l
1084.17 543.332 l
1078.33 551.668 l
1072.5 559.168 l
1066.67 567.5 l
1060.83 575.832 l
1054.17 584.168 l
1048.33 591.668 l
1042.5 600 l
1036.67 609.168 l
1030.83 617.5 l
1025 625.832 l
1019.17 634.168 l
1013.33 642.5 l
1007.5 651.668 l
1001.67 660 l
996.668 668.332 l
990.832 677.5 l
985 685.832 l
979.168 695 l
973.332 703.332 l
967.5 712.5 l
962.5 721.668 l
956.668 730.832 l
950.832 739.168 l
945.832 748.332 l
940 757.5 l
935 766.668 l
929.168 775.832 l
923.332 785 l
918.332 794.168 l
912.5 803.332 l
907.5 812.5 l
902.5 821.668 l
896.668 830.832 l
891.668 840 l
886.668 849.168 l
880.832 858.332 l
875.832 867.5 l
870.832 876.668 l
865.832 885.832 l
860 895.832 l
855 905 l
850 914.168 l
845 923.332 l
840 932.5 l
835 942.5 l
830 951.668 l
825 960.832 l
820 970 l
815 980 l
810.832 989.168 l
805.832 998.332 l
800.832 1007.5 l
795.832 1016.67 l
791.668 1026.67 l
786.668 1035.83 l
781.668 1045 l
777.5 1054.17 l
772.5 1063.33 l
768.332 1073.33 l
763.332 1082.5 l
759.168 1091.67 l
755 1100.83 l
750 1110 l
745.832 1119.17 l
741.668 1128.33 l
736.668 1137.5 l
S
1940.83 272.5 m
1396.67 272.5 l
1390 273.332 l
1383.33 275.832 l
1376.67 277.5 l
1370 280 l
1363.33 282.5 l
1357.5 285.832 l
1350.83 288.332 l
1344.17 291.668 l
1337.5 295.832 l
1330.83 299.168 l
1324.17 303.332 l
1317.5 307.5 l
1310.83 311.668 l
1305 316.668 l
1298.33 320.832 l
1291.67 325.832 l
S
2440.83 272.5 m
1940.83 272.5 l
S
2605.83 272.5 m
2440.83 272.5 l
S
Q
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 139.5 9] Tm
0 0 Td
/F8_0 10 Tf
(Gap)
[7.78
0
5.56
0
5.56
0] Tj
[0 1 -1 0 27.6668 98.5832] Tm
0 0 Td
/F8_0 10 Tf
(Force)
[6.11
0
5.56
0
3.33
0
5
0
5.56
0] Tj
[1 0 0 1 117.583 206.75] Tm
0 0 Td
/F8_0 10 Tf
(Viscoelasticity)
[6.67
0
2.22
0
5
0
5
0
5.56
0
5.56
0
2.22
0
5.56
0
5
0
2.78
0
2.22
0
5
0
2.22
0
2.78
0
5
0] Tj
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
