%!PS-Adobe-3.0 EPSF-3.0
%Produced by poppler pdftops version: 0.71.0 (http://poppler.freedesktop.org)
%%Creator: MATLAB, The Mathworks, Inc. Version 7.8.0.347 (R2009a). Operating System: Linux 2.6.39-2-amd64 #1 SMP Tue Jul 5 02:51:22 UTC 2011 x86_64.
%%LanguageLevel: 2
%%DocumentSuppliedResources: (atend)
%%BoundingBox: 0 0 288 216
%%HiResBoundingBox: 0 0 288 216
%%DocumentSuppliedResources: (atend)
%%EndComments
%%BeginProlog
%%BeginResource: procset xpdf 3.00 0
%%Copyright: Copyright 1996-2011 Glyph & Cog, LLC
/xpdf 75 dict def xpdf begin
% PDF special state
/pdfDictSize 15 def
/pdfSetup {
  /setpagedevice where {
    pop 2 dict begin
      /Policies 1 dict dup begin /PageSize 6 def end def
      { /Duplex true def } if
    currentdict end setpagedevice
  } {
    pop
  } ifelse
} def
/pdfSetupPaper {
  % Change paper size, but only if different from previous paper size otherwise
  % duplex fails. PLRM specifies a tolerance of 5 pts when matching paper size
  % so we use the same when checking if the size changes.
  /setpagedevice where {
    pop currentpagedevice
    /PageSize known {
      2 copy
      currentpagedevice /PageSize get aload pop
      exch 4 1 roll
      sub abs 5 gt
      3 1 roll
      sub abs 5 gt
      or
    } {
      true
    } ifelse
    {
      2 array astore
      2 dict begin
        /PageSize exch def
        /ImagingBBox null def
      currentdict end
      setpagedevice
    } {
      pop pop
    } ifelse
  } {
    pop
  } ifelse
} def
/pdfStartPage {
  pdfDictSize dict begin
  /pdfFillCS [] def
  /pdfFillXform {} def
  /pdfStrokeCS [] def
  /pdfStrokeXform {} def
  /pdfFill [0] def
  /pdfStroke [0] def
  /pdfFillOP false def
  /pdfStrokeOP false def
  /pdfLastFill false def
  /pdfLastStroke false def
  /pdfTextMat [1 0 0 1 0 0] def
  /pdfFontSize 0 def
  /pdfCharSpacing 0 def
  /pdfTextRender 0 def
  /pdfPatternCS false def
  /pdfTextRise 0 def
  /pdfWordSpacing 0 def
  /pdfHorizScaling 1 def
  /pdfTextClipPath [] def
} def
/pdfEndPage { end } def
% PDF color state
/cs { /pdfFillXform exch def dup /pdfFillCS exch def
      setcolorspace } def
/CS { /pdfStrokeXform exch def dup /pdfStrokeCS exch def
      setcolorspace } def
/sc { pdfLastFill not { pdfFillCS setcolorspace } if
      dup /pdfFill exch def aload pop pdfFillXform setcolor
     /pdfLastFill true def /pdfLastStroke false def } def
/SC { pdfLastStroke not { pdfStrokeCS setcolorspace } if
      dup /pdfStroke exch def aload pop pdfStrokeXform setcolor
     /pdfLastStroke true def /pdfLastFill false def } def
/op { /pdfFillOP exch def
      pdfLastFill { pdfFillOP setoverprint } if } def
/OP { /pdfStrokeOP exch def
      pdfLastStroke { pdfStrokeOP setoverprint } if } def
/fCol {
  pdfLastFill not {
    pdfFillCS setcolorspace
    pdfFill aload pop pdfFillXform setcolor
    pdfFillOP setoverprint
    /pdfLastFill true def /pdfLastStroke false def
  } if
} def
/sCol {
  pdfLastStroke not {
    pdfStrokeCS setcolorspace
    pdfStroke aload pop pdfStrokeXform setcolor
    pdfStrokeOP setoverprint
    /pdfLastStroke true def /pdfLastFill false def
  } if
} def
% build a font
/pdfMakeFont {
  4 3 roll findfont
  4 2 roll matrix scale makefont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /Encoding exch def
    currentdict
  end
  definefont pop
} def
/pdfMakeFont16 {
  exch findfont
  dup length dict begin
    { 1 index /FID ne { def } { pop pop } ifelse } forall
    /WMode exch def
    currentdict
  end
  definefont pop
} def
% graphics state operators
/q { gsave pdfDictSize dict begin } def
/Q {
  end grestore
  /pdfLastFill where {
    pop
    pdfLastFill {
      pdfFillOP setoverprint
    } {
      pdfStrokeOP setoverprint
    } ifelse
  } if
} def
/cm { concat } def
/d { setdash } def
/i { setflat } def
/j { setlinejoin } def
/J { setlinecap } def
/M { setmiterlimit } def
/w { setlinewidth } def
% path segment operators
/m { moveto } def
/l { lineto } def
/c { curveto } def
/re { 4 2 roll moveto 1 index 0 rlineto 0 exch rlineto
      neg 0 rlineto closepath } def
/h { closepath } def
% path painting operators
/S { sCol stroke } def
/Sf { fCol stroke } def
/f { fCol fill } def
/f* { fCol eofill } def
% clipping operators
/W { clip newpath } def
/W* { eoclip newpath } def
/Ws { strokepath clip newpath } def
% text state operators
/Tc { /pdfCharSpacing exch def } def
/Tf { dup /pdfFontSize exch def
      dup pdfHorizScaling mul exch matrix scale
      pdfTextMat matrix concatmatrix dup 4 0 put dup 5 0 put
      exch findfont exch makefont setfont } def
/Tr { /pdfTextRender exch def } def
/Tp { /pdfPatternCS exch def } def
/Ts { /pdfTextRise exch def } def
/Tw { /pdfWordSpacing exch def } def
/Tz { /pdfHorizScaling exch def } def
% text positioning operators
/Td { pdfTextMat transform moveto } def
/Tm { /pdfTextMat exch def } def
% text string operators
/xyshow where {
  pop
  /xyshow2 {
    dup length array
    0 2 2 index length 1 sub {
      2 index 1 index 2 copy get 3 1 roll 1 add get
      pdfTextMat dtransform
      4 2 roll 2 copy 6 5 roll put 1 add 3 1 roll dup 4 2 roll put
    } for
    exch pop
    xyshow
  } def
}{
  /xyshow2 {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval show moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval show moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/cshow where {
  pop
  /xycp {
    0 3 2 roll
    {
      pop pop currentpoint 3 2 roll
      1 string dup 0 4 3 roll put false charpath moveto
      2 copy get 2 index 2 index 1 add get
      pdfTextMat dtransform rmoveto
      2 add
    } exch cshow
    pop pop
  } def
}{
  /xycp {
    currentfont /FontType get 0 eq {
      0 2 3 index length 1 sub {
        currentpoint 4 index 3 index 2 getinterval false charpath moveto
        2 copy get 2 index 3 2 roll 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } {
      0 1 3 index length 1 sub {
        currentpoint 4 index 3 index 1 getinterval false charpath moveto
        2 copy 2 mul get 2 index 3 2 roll 2 mul 1 add get
        pdfTextMat dtransform rmoveto
      } for
    } ifelse
    pop pop
  } def
} ifelse
/Tj {
  fCol
  0 pdfTextRise pdfTextMat dtransform rmoveto
  currentpoint 4 2 roll
  pdfTextRender 1 and 0 eq {
    2 copy xyshow2
  } if
  pdfTextRender 3 and dup 1 eq exch 2 eq or {
    3 index 3 index moveto
    2 copy
    currentfont /FontType get 3 eq { fCol } { sCol } ifelse
    xycp currentpoint stroke moveto
  } if
  pdfTextRender 4 and 0 ne {
    4 2 roll moveto xycp
    /pdfTextClipPath [ pdfTextClipPath aload pop
      {/moveto cvx}
      {/lineto cvx}
      {/curveto cvx}
      {/closepath cvx}
    pathforall ] def
    currentpoint newpath moveto
  } {
    pop pop pop pop
  } ifelse
  0 pdfTextRise neg pdfTextMat dtransform rmoveto
} def
/TJm { 0.001 mul pdfFontSize mul pdfHorizScaling mul neg 0
       pdfTextMat dtransform rmoveto } def
/TJmV { 0.001 mul pdfFontSize mul neg 0 exch
        pdfTextMat dtransform rmoveto } def
/Tclip { pdfTextClipPath cvx exec clip newpath
         /pdfTextClipPath [] def } def
/Tclip* { pdfTextClipPath cvx exec eoclip newpath
         /pdfTextClipPath [] def } def
% Level 2/3 image operators
/pdfImBuf 100 string def
/pdfImStr {
  2 copy exch length lt {
    2 copy get exch 1 add exch
  } {
    ()
  } ifelse
} def
/skipEOD {
  { currentfile pdfImBuf readline
    not { pop exit } if
    (%-EOD-) eq { exit } if } loop
} def
/pdfIm { image skipEOD } def
/pdfImM { fCol imagemask skipEOD } def
/pr { 2 index 2 index 3 2 roll putinterval 4 add } def
/pdfImClip {
  gsave
  0 2 4 index length 1 sub {
    dup 4 index exch 2 copy
    get 5 index div put
    1 add 3 index exch 2 copy
    get 3 index div put
  } for
  pop pop rectclip
} def
/pdfImClipEnd { grestore } def
% shading operators
/colordelta {
  false 0 1 3 index length 1 sub {
    dup 4 index exch get 3 index 3 2 roll get sub abs 0.004 gt {
      pop true
    } if
  } for
  exch pop exch pop
} def
/funcCol { func n array astore } def
/funcSH {
  dup 0 eq {
    true
  } {
    dup 6 eq {
      false
    } {
      4 index 4 index funcCol dup
      6 index 4 index funcCol dup
      3 1 roll colordelta 3 1 roll
      5 index 5 index funcCol dup
      3 1 roll colordelta 3 1 roll
      6 index 8 index funcCol dup
      3 1 roll colordelta 3 1 roll
      colordelta or or or
    } ifelse
  } ifelse
  {
    1 add
    4 index 3 index add 0.5 mul exch 4 index 3 index add 0.5 mul exch
    6 index 6 index 4 index 4 index 4 index funcSH
    2 index 6 index 6 index 4 index 4 index funcSH
    6 index 2 index 4 index 6 index 4 index funcSH
    5 3 roll 3 2 roll funcSH pop pop
  } {
    pop 3 index 2 index add 0.5 mul 3 index  2 index add 0.5 mul
    funcCol sc
    dup 4 index exch mat transform m
    3 index 3 index mat transform l
    1 index 3 index mat transform l
    mat transform l pop pop h f*
  } ifelse
} def
/axialCol {
  dup 0 lt {
    pop t0
  } {
    dup 1 gt {
      pop t1
    } {
      dt mul t0 add
    } ifelse
  } ifelse
  func n array astore
} def
/axialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index axialCol 2 index axialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index axialSH
    exch 3 2 roll axialSH
  } {
    pop 2 copy add 0.5 mul
    axialCol sc
    exch dup dx mul x0 add exch dy mul y0 add
    3 2 roll dup dx mul x0 add exch dy mul y0 add
    dx abs dy abs ge {
      2 copy yMin sub dy mul dx div add yMin m
      yMax sub dy mul dx div add yMax l
      2 copy yMax sub dy mul dx div add yMax l
      yMin sub dy mul dx div add yMin l
      h f*
    } {
      exch 2 copy xMin sub dx mul dy div add xMin exch m
      xMax sub dx mul dy div add xMax exch l
      exch 2 copy xMax sub dx mul dy div add xMax exch l
      xMin sub dx mul dy div add xMin exch l
      h f*
    } ifelse
  } ifelse
} def
/radialCol {
  dup t0 lt {
    pop t0
  } {
    dup t1 gt {
      pop t1
    } if
  } ifelse
  func n array astore
} def
/radialSH {
  dup 0 eq {
    true
  } {
    dup 8 eq {
      false
    } {
      2 index dt mul t0 add radialCol
      2 index dt mul t0 add radialCol colordelta
    } ifelse
  } ifelse
  {
    1 add 3 1 roll 2 copy add 0.5 mul
    dup 4 3 roll exch 4 index radialSH
    exch 3 2 roll radialSH
  } {
    pop 2 copy add 0.5 mul dt mul t0 add
    radialCol sc
    encl {
      exch dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      0 360 arc h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      360 0 arcn h f
    } {
      2 copy
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arcn
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arcn h
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a1 a2 arc
      dup dx mul x0 add exch dup dy mul y0 add exch dr mul r0 add
      a2 a1 arc h f
    } ifelse
  } ifelse
} def
end
%%EndResource
%%EndProlog
%%BeginSetup
xpdf begin
/F8_0 /Helvetica 1 1
[ /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /space/exclam/quotedbl/numbersign/dollar/percent/ampersand/quoteright
  /parenleft/parenright/asterisk/plus/comma/minus/period/slash
  /zero/one/two/three/four/five/six/seven
  /eight/nine/colon/semicolon/less/equal/greater/question
  /at/A/B/C/D/E/F/G
  /H/I/J/K/L/M/N/O
  /P/Q/R/S/T/U/V/W
  /X/Y/Z/bracketleft/backslash/bracketright/asciicircum/underscore
  /quoteleft/a/b/c/d/e/f/g
  /h/i/j/k/l/m/n/o
  /p/q/r/s/t/u/v/w
  /x/y/z/braceleft/bar/braceright/asciitilde/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/exclamdown/cent/sterling/fraction/yen/florin/section
  /currency/quotesingle/quotedblleft/guillemotleft/guilsinglleft/guilsinglright/fi/fl
  /.notdef/endash/dagger/daggerdbl/periodcentered/.notdef/paragraph/bullet
  /quotesinglbase/quotedblbase/quotedblright/guillemotright/ellipsis/perthousand/.notdef/questiondown
  /.notdef/grave/acute/circumflex/tilde/macron/breve/dotaccent
  /dieresis/.notdef/ring/cedilla/.notdef/hungarumlaut/ogonek/caron
  /emdash/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef/.notdef
  /.notdef/AE/.notdef/ordfeminine/.notdef/.notdef/.notdef/.notdef
  /Lslash/Oslash/OE/ordmasculine/.notdef/.notdef/.notdef/.notdef
  /.notdef/ae/.notdef/.notdef/.notdef/dotlessi/.notdef/.notdef
  /lslash/oslash/oe/germandbls/.notdef/.notdef/.notdef/.notdef]
pdfMakeFont
%%EndSetup
pdfStartPage
%%EndPageSetup
[] 0 d
1 i
0 j
0 J
10 M
1 w
/DeviceGray {} cs
[0] sc
/DeviceGray {} CS
[0] SC
false op
false OP
{} settransfer
0 0 288 216 re
W
q
q
[0.1 0 0 0.1 0 0] cm
5 w
1 j
/DeviceGray {} CS
[1] SC
375.832 264.168 2230.838 1734.162 re
S
/DeviceGray {} CS
[0] SC
375.832 264.168 m
2606.67 264.168 l
S
375.832 1998.33 m
2606.67 1998.33 l
S
375.832 264.168 m
375.832 1998.33 l
S
2606.67 264.168 m
2606.67 1998.33 l
S
375.832 264.168 m
2606.67 264.168 l
S
375.832 264.168 m
375.832 1998.33 l
S
375.832 264.168 m
375.832 286.668 l
S
375.832 1998.33 m
375.832 1976.67 l
S
/DeviceGray {} cs
[0] sc
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 29 14.3332] Tm
0 0 Td
/F8_0 10 Tf
(-2)
[5.84
0
5.56
0] Tj
Q
933.332 264.168 m
933.332 286.668 l
S
933.332 1998.33 m
933.332 1976.67 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 84.75 14.3332] Tm
0 0 Td
/F8_0 10 Tf
(-1)
[5.84
0
5.56
0] Tj
Q
1490.83 264.168 m
1490.83 286.668 l
S
1490.83 1998.33 m
1490.83 1976.67 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 146.333 14.3332] Tm
0 0 Td
/F8_0 10 Tf
(0)
[5.56
0] Tj
Q
2048.33 264.168 m
2048.33 286.668 l
S
2048.33 1998.33 m
2048.33 1976.67 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 202.083 14.3332] Tm
0 0 Td
/F8_0 10 Tf
(1)
[5.56
0] Tj
Q
2606.67 264.168 m
2606.67 286.668 l
S
2606.67 1998.33 m
2606.67 1976.67 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 257.917 14.3332] Tm
0 0 Td
/F8_0 10 Tf
(2)
[5.56
0] Tj
Q
375.832 373.332 m
397.5 373.332 l
S
2606.67 373.332 m
2584.17 373.332 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 29.1668 33.6668] Tm
0 0 Td
/F8_0 10 Tf
(0)
[5.56
0] Tj
Q
375.832 915 m
397.5 915 l
S
2606.67 915 m
2584.17 915 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 20.8332 87.8332] Tm
0 0 Td
/F8_0 10 Tf
(0.5)
[5.56
0
2.78
0
5.56
0] Tj
Q
375.832 1456.67 m
397.5 1456.67 l
S
2606.67 1456.67 m
2584.17 1456.67 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 29.1668 142] Tm
0 0 Td
/F8_0 10 Tf
(1)
[5.56
0] Tj
Q
375.832 1998.33 m
397.5 1998.33 l
S
2606.67 1998.33 m
2584.17 1998.33 l
S
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 20.8332 196.167] Tm
0 0 Td
/F8_0 10 Tf
(1.5)
[5.56
0
2.78
0
5.56
0] Tj
Q
375.832 264.168 m
2606.67 264.168 l
S
375.832 1998.33 m
2606.67 1998.33 l
S
375.832 264.168 m
375.832 1998.33 l
S
2606.67 264.168 m
2606.67 1998.33 l
S
q
375.832 263.332 2231.668 1735.838 re
W
20 w
/DeviceRGB {} CS
[1 0 0] SC
596.668 1392.5 m
594.168 1395.83 l
591.668 1400 l
589.168 1404.17 l
587.5 1407.5 l
585 1411.67 l
582.5 1415 l
580.832 1419.17 l
578.332 1423.33 l
575.832 1426.67 l
574.168 1430.83 l
571.668 1435 l
569.168 1438.33 l
567.5 1442.5 l
565 1445.83 l
562.5 1450 l
560.832 1454.17 l
558.332 1457.5 l
555.832 1461.67 l
554.168 1465.83 l
551.668 1469.17 l
549.168 1473.33 l
547.5 1477.5 l
545 1481.67 l
542.5 1485 l
540.832 1489.17 l
538.332 1493.33 l
535.832 1496.67 l
534.168 1500.83 l
531.668 1505 l
529.168 1509.17 l
527.5 1512.5 l
525 1516.67 l
522.5 1520.83 l
520.832 1525 l
518.332 1528.33 l
515.832 1532.5 l
513.332 1536.67 l
511.668 1540.83 l
509.168 1545 l
506.668 1548.33 l
505 1552.5 l
502.5 1556.67 l
500 1560.83 l
498.332 1565 l
495.832 1568.33 l
493.332 1572.5 l
491.668 1576.67 l
489.168 1580.83 l
486.668 1585 l
485 1589.17 l
482.5 1592.5 l
480 1596.67 l
478.332 1600.83 l
475.832 1605 l
473.332 1609.17 l
471.668 1613.33 l
469.168 1617.5 l
466.668 1621.67 l
465 1625.83 l
462.5 1629.17 l
460 1633.33 l
458.332 1637.5 l
455.832 1641.67 l
453.332 1645.83 l
451.668 1650 l
449.168 1654.17 l
446.668 1658.33 l
444.168 1662.5 l
442.5 1666.67 l
440 1670.83 l
437.5 1675 l
435.832 1679.17 l
433.332 1683.33 l
430.832 1687.5 l
429.168 1691.67 l
426.668 1695.83 l
424.168 1700 l
422.5 1704.17 l
420 1708.33 l
417.5 1712.5 l
415.832 1716.67 l
413.332 1720.83 l
410.832 1725 l
409.168 1729.17 l
406.668 1733.33 l
404.168 1737.5 l
402.5 1741.67 l
400 1745.83 l
397.5 1750 l
395.832 1754.17 l
393.332 1758.33 l
390.832 1762.5 l
389.168 1766.67 l
386.668 1770.83 l
384.168 1775 l
382.5 1779.17 l
380 1784.17 l
377.5 1788.33 l
375.832 1792.5 l
S
817.5 1039.17 m
815 1042.5 l
812.5 1045.83 l
810.832 1049.17 l
808.332 1052.5 l
805.832 1055.83 l
803.332 1059.17 l
801.668 1062.5 l
799.168 1065.83 l
796.668 1069.17 l
795 1072.5 l
792.5 1075.83 l
790 1079.17 l
788.332 1082.5 l
785.832 1085.83 l
783.332 1089.17 l
781.668 1092.5 l
779.168 1096.67 l
776.668 1100 l
775 1103.33 l
772.5 1106.67 l
770 1110 l
768.332 1113.33 l
765.832 1116.67 l
763.332 1120 l
761.668 1123.33 l
759.168 1126.67 l
756.668 1130.83 l
755 1134.17 l
752.5 1137.5 l
750 1140.83 l
748.332 1144.17 l
745.832 1147.5 l
743.332 1151.67 l
741.668 1155 l
739.168 1158.33 l
736.668 1161.67 l
734.168 1165 l
732.5 1169.17 l
730 1172.5 l
727.5 1175.83 l
725.832 1179.17 l
723.332 1183.33 l
720.832 1186.67 l
719.168 1190 l
716.668 1193.33 l
714.168 1197.5 l
712.5 1200.83 l
710 1204.17 l
707.5 1207.5 l
705.832 1211.67 l
703.332 1215 l
700.832 1218.33 l
699.168 1222.5 l
696.668 1225.83 l
694.168 1229.17 l
692.5 1232.5 l
690 1236.67 l
687.5 1240 l
685.832 1243.33 l
683.332 1247.5 l
680.832 1250.83 l
679.168 1254.17 l
676.668 1258.33 l
674.168 1261.67 l
672.5 1265.83 l
670 1269.17 l
667.5 1272.5 l
665.832 1276.67 l
663.332 1280 l
660.832 1284.17 l
658.332 1287.5 l
656.668 1290.83 l
654.168 1295 l
651.668 1298.33 l
650 1302.5 l
647.5 1305.83 l
645 1310 l
643.332 1313.33 l
640.832 1316.67 l
638.332 1320.83 l
636.668 1324.17 l
634.168 1328.33 l
631.668 1331.67 l
630 1335.83 l
627.5 1339.17 l
625 1343.33 l
623.332 1346.67 l
620.832 1350.83 l
618.332 1354.17 l
616.668 1358.33 l
614.168 1361.67 l
611.668 1365.83 l
610 1369.17 l
607.5 1373.33 l
605 1377.5 l
603.332 1380.83 l
600.832 1385 l
598.332 1388.33 l
596.668 1392.5 l
S
1038.33 740 m
1035.83 742.5 l
1033.33 745.832 l
1031.67 748.332 l
1029.17 750.832 l
1026.67 754.168 l
1025 756.668 l
1022.5 759.168 l
1020 761.668 l
1017.5 765 l
1015.83 767.5 l
1013.33 770 l
1010.83 773.332 l
1009.17 775.832 l
1006.67 779.168 l
1004.17 781.668 l
1002.5 784.168 l
1000 787.5 l
997.5 790 l
995.832 792.5 l
993.332 795.832 l
990.832 798.332 l
989.168 801.668 l
986.668 804.168 l
984.168 807.5 l
982.5 810 l
980 812.5 l
977.5 815.832 l
975.832 818.332 l
973.332 821.668 l
970.832 824.168 l
969.168 827.5 l
966.668 830 l
964.168 833.332 l
962.5 835.832 l
960 839.168 l
957.5 841.668 l
955.832 845 l
953.332 848.332 l
950.832 850.832 l
948.332 854.168 l
946.668 856.668 l
944.168 860 l
941.668 862.5 l
940 865.832 l
937.5 869.168 l
935 871.668 l
933.332 875 l
930.832 877.5 l
928.332 880.832 l
926.668 884.168 l
924.168 886.668 l
921.668 890 l
920 893.332 l
917.5 895.832 l
915 899.168 l
913.332 902.5 l
910.832 905 l
908.332 908.332 l
906.668 911.668 l
904.168 914.168 l
901.668 917.5 l
900 920.832 l
897.5 923.332 l
895 926.668 l
893.332 930 l
890.832 933.332 l
888.332 935.832 l
886.668 939.168 l
884.168 942.5 l
881.668 945.832 l
880 948.332 l
877.5 951.668 l
875 955 l
872.5 958.332 l
870.832 961.668 l
868.332 964.168 l
865.832 967.5 l
864.168 970.832 l
861.668 974.168 l
859.168 977.5 l
857.5 980.832 l
855 984.168 l
852.5 986.668 l
850.832 990 l
848.332 993.332 l
845.832 996.668 l
844.168 1000 l
841.668 1003.33 l
839.168 1006.67 l
837.5 1010 l
835 1013.33 l
832.5 1015.83 l
830.832 1019.17 l
828.332 1022.5 l
825.832 1025.83 l
824.168 1029.17 l
821.668 1032.5 l
819.168 1035.83 l
817.5 1039.17 l
S
1259.17 507.5 m
1256.67 509.168 l
1254.17 511.668 l
1252.5 513.332 l
1250 515.832 l
1247.5 517.5 l
1245.83 519.168 l
1243.33 521.668 l
1240.83 523.332 l
1238.33 525.832 l
1236.67 527.5 l
1234.17 529.168 l
1231.67 531.668 l
1230 533.332 l
1227.5 535.832 l
1225 537.5 l
1223.33 540 l
1220.83 541.668 l
1218.33 544.168 l
1216.67 545.832 l
1214.17 548.332 l
1211.67 550 l
1210 552.5 l
1207.5 555 l
1205 556.668 l
1203.33 559.168 l
1200.83 560.832 l
1198.33 563.332 l
1196.67 565.832 l
1194.17 567.5 l
1191.67 570 l
1190 572.5 l
1187.5 574.168 l
1185 576.668 l
1183.33 579.168 l
1180.83 580.832 l
1178.33 583.332 l
1176.67 585.832 l
1174.17 587.5 l
1171.67 590 l
1170 592.5 l
1167.5 595 l
1165 596.668 l
1162.5 599.168 l
1160.83 601.668 l
1158.33 604.168 l
1155.83 605.832 l
1154.17 608.332 l
1151.67 610.832 l
1149.17 613.332 l
1147.5 615.832 l
1145 618.332 l
1142.5 620 l
1140.83 622.5 l
1138.33 625 l
1135.83 627.5 l
1134.17 630 l
1131.67 632.5 l
1129.17 635 l
1127.5 637.5 l
1125 640 l
1122.5 641.668 l
1120.83 644.168 l
1118.33 646.668 l
1115.83 649.168 l
1114.17 651.668 l
1111.67 654.168 l
1109.17 656.668 l
1107.5 659.168 l
1105 661.668 l
1102.5 664.168 l
1100.83 666.668 l
1098.33 669.168 l
1095.83 671.668 l
1093.33 674.168 l
1091.67 676.668 l
1089.17 679.168 l
1086.67 682.5 l
1085 685 l
1082.5 687.5 l
1080 690 l
1078.33 692.5 l
1075.83 695 l
1073.33 697.5 l
1071.67 700 l
1069.17 702.5 l
1066.67 705.832 l
1065 708.332 l
1062.5 710.832 l
1060 713.332 l
1058.33 715.832 l
1055.83 718.332 l
1053.33 721.668 l
1051.67 724.168 l
1049.17 726.668 l
1046.67 729.168 l
1045 731.668 l
1042.5 735 l
1040 737.5 l
1038.33 740 l
S
1480 374.168 m
1477.5 375 l
1475 375 l
1473.33 375.832 l
1470.83 376.668 l
1468.33 376.668 l
1466.67 377.5 l
1464.17 378.332 l
1461.67 379.168 l
1460 380 l
1457.5 380 l
1455 380.832 l
1452.5 381.668 l
1450.83 382.5 l
1448.33 383.332 l
1445.83 384.168 l
1444.17 385 l
1441.67 385.832 l
1439.17 386.668 l
1437.5 387.5 l
1435 389.168 l
1432.5 390 l
1430.83 390.832 l
1428.33 391.668 l
1425.83 392.5 l
1424.17 394.168 l
1421.67 395 l
1419.17 395.832 l
1417.5 396.668 l
1415 398.332 l
1412.5 399.168 l
1410.83 400 l
1408.33 401.668 l
1405.83 402.5 l
1404.17 404.168 l
1401.67 405 l
1399.17 406.668 l
1397.5 407.5 l
1395 409.168 l
1392.5 410 l
1390.83 411.668 l
1388.33 412.5 l
1385.83 414.168 l
1384.17 415 l
1381.67 416.668 l
1379.17 417.5 l
1376.67 419.168 l
1375 420.832 l
1372.5 421.668 l
1370 423.332 l
1368.33 425 l
1365.83 425.832 l
1363.33 427.5 l
1361.67 429.168 l
1359.17 430.832 l
1356.67 431.668 l
1355 433.332 l
1352.5 435 l
1350 436.668 l
1348.33 438.332 l
1345.83 439.168 l
1343.33 440.832 l
1341.67 442.5 l
1339.17 444.168 l
1336.67 445.832 l
1335 447.5 l
1332.5 449.168 l
1330 450.832 l
1328.33 452.5 l
1325.83 454.168 l
1323.33 455.832 l
1321.67 456.668 l
1319.17 458.332 l
1316.67 460.832 l
1315 462.5 l
1312.5 464.168 l
1310 465.832 l
1307.5 467.5 l
1305.83 469.168 l
1303.33 470.832 l
1300.83 472.5 l
1299.17 474.168 l
1296.67 475.832 l
1294.17 477.5 l
1292.5 479.168 l
1290 481.668 l
1287.5 483.332 l
1285.83 485 l
1283.33 486.668 l
1280.83 488.332 l
1279.17 490.832 l
1276.67 492.5 l
1274.17 494.168 l
1272.5 495.832 l
1270 498.332 l
1267.5 500 l
1265.83 501.668 l
1263.33 503.332 l
1260.83 505.832 l
1259.17 507.5 l
S
1700.83 373.332 m
1484.17 373.332 l
1481.67 374.168 l
1480 374.168 l
S
1921.67 373.332 m
1700.83 373.332 l
S
2142.5 373.332 m
1921.67 373.332 l
S
2363.33 373.332 m
2142.5 373.332 l
S
2584.17 373.332 m
2363.33 373.332 l
S
2604.17 373.332 m
2584.17 373.332 l
S
[60] 0 d
10 w
/DeviceGray {} CS
[0] SC
375.832 373.332 m
2607.5 373.332 l
S
1490.83 263.332 m
1490.83 1999.17 l
S
Q
q
[10 0 0 10 0 0] cm
[1 0 0 1 0 0] Tm
0 0 Td
[1 0 0 1 123.75 2.4168] Tm
0 0 Td
/F8_0 10 Tf
(Gap d \(nm\))
[7.78
0
5.56
0
5.56
0
2.78
0
5.56
0
2.78
0
3.33
0
5.56
0
8.33
0
3.33
0] Tj
[0 1 -1 0 9.5 80.5832] Tm
0 0 Td
/F8_0 10 Tf
(Force  F)
[6.11
0
5.56
0
3.33
0
5
0
5.56
0
2.78
0
2.78
0
6.11
0] Tj
36.9168 -5 Td
/F8_0 8 Tf
(ts)
[2.224
0
4
0] Tj
43.0836 0 Td
/F8_0 10 Tf
( \(nN\))
[2.78
0
3.33
0
5.56
0
7.22
0
3.33
0] Tj
Q
Q
Q
showpage
%%PageTrailer
pdfEndPage
%%Trailer
end
%%DocumentSuppliedResources:
%%EOF
